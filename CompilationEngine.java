import java.io.File;
import java.io.PrintWriter;
import java.util.regex.Pattern;

/**
 * The compilation engine gets its input from a {@link JackTokenizer} and emits its output to an output file. The output
 * is generated by a series of <code>compile</code><i>xxx</i> routines, each designed to handle the compilation of a
 * specific Jack language construct <i>xxx</i>. The contract between routines is that each <code>compile</code><i>xxx</i>
 * routine should get from the input, and handle, all the tokens that make up <i>xxx</i>, advance the tokenizer exactly
 * beyond these tokens, and output the parsing of <i>xxx</i>. As a rule, each <code>compile</code><i>xxx</i> is called
 * only if the current token is <i>xxx</i>.
 *
 * @author Maarten Derks
 */
class CompilationEngine {

    private final JackTokenizer jt;
    private final PrintWriter pw;
    private String indentation;

    private final String integerConstant = "^(0|[1-9]\\d*)$";
    private final String stringConstant = "\".*?\"";
    private final String identifier = "[a-zA-Z_][a-zA-Z0-9_]*";
    private final String className = identifier;
    private final String type = "int|char|boolean|" + className;
    private final String varName = identifier;
    private final String subroutineName = identifier;
    private final String op = "\\+|-|\\*|/|&|\\||<|>|=";
    private final String unaryOp = "-|~";
    private final String keywordConstant = "true|false|null|this";

    /**
     * Creates a new compilation engine with the given input and output.
     *
     * @param in  Input stream/file
     * @param out Output stream/file
     */
    CompilationEngine(File in, File out) throws Exception {
        jt = new JackTokenizer(in);
        pw = new PrintWriter(out);
        indentation = "";
        jt.advance();
    }

    /**
     * Compiles a complete class.
     */
    void compileClass() {
        print("<class>");
        process("class");
        process(className);
        process("{");
        while (jt.tokenType() == TokenType.KEYWORD &&
                (jt.keyWord() == Keyword.STATIC || jt.keyWord() == Keyword.FIELD)) {
            compileClassVarDec();
        }
        while (jt.tokenType() == TokenType.KEYWORD &&
                (jt.keyWord() == Keyword.CONSTRUCTOR || jt.keyWord() == Keyword.FUNCTION || jt.keyWord() == Keyword.METHOD)) {
            compileSubroutine();
        }
        process("}");
        print("</class>");
        pw.close();
    }

    /**
     * Compiles a static variable declaration, or a field declaration.
     */
    private void compileClassVarDec() {
        print("<classVarDec>");
        process("static|field");
        process(type);
        process(varName);
        while (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == ',') {
            process(",");
            process(varName);
        }
        process(";");
        print("</classVarDec>");
    }

    /**
     * Compiles a complete method, function, or constructor.
     */
    private void compileSubroutine() {
        print("<subroutineDec>");
        process("constructor|function|method");
        process("void|" + type);
        process(subroutineName);
        process("(");
        compileParameterList();
        process(")");
        compileSubroutineBody();
        print("</subroutineDec>");
    }

    /**
     * Compiles a (possibly empty) parameter list. Does not handle the enclosing parentheses tokens ( and ).
     */
    private void compileParameterList() {
        print("<parameterList>");
        if (jt.tokenType() == TokenType.KEYWORD && (jt.keyWord() == Keyword.INT || jt.keyWord() == Keyword.BOOLEAN)) {
            process(type);
            process(varName);
        }
        while (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == ',') {
            process(",");
            process(type);
            process(varName);
        }
        print("</parameterList>");
    }

    /**
     * Compiles a subroutine's body.
     */
    private void compileSubroutineBody() {
        print("<subroutineBody>");
        process("{");
        while (jt.tokenType() == TokenType.KEYWORD && jt.keyWord() == Keyword.VAR) {
            compileVarDec();
        }
        compileStatements();
        process("}");
        print("</subroutineBody>");
    }

    /**
     * Compiles a <code>var</code> declaration.
     */
    private void compileVarDec() {
        print("<varDec>");
        process("var");
        process(type);
        process(varName);
        while (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == ',') {
            process(",");
            process(varName);
        }
        process(";");
        print("</varDec>");
    }

    /**
     * Compiles a sequence of statements. Does not handle the enclosing curly bracket tokens { and }.
     */
    private void compileStatements() {
        print("<statements>");
        while (jt.tokenType() == TokenType.KEYWORD && (jt.keyWord() == Keyword.LET || jt.keyWord() == Keyword.IF || jt.keyWord() == Keyword.WHILE || jt.keyWord() == Keyword.DO || jt.keyWord() == Keyword.RETURN)) {
            switch (jt.keyWord()) {
                case LET: compileLet(); break;
                case IF: compileIf(); break;
                case WHILE: compileWhile(); break;
                case DO: compileDo(); break;
                case RETURN: compileReturn(); break;
            }
        }
        print("</statements>");
    }

    /**
     * Compiles a <code>let</code> statement.
     */
    private void compileLet() {
        print("<letStatement>");
        process("let");
        process(varName);
        if (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == '[') {
            process("[");
            compileExpression();
            process("]");
        }
        process("=");
        compileExpression();
        process(";");
        print("</letStatement>");
    }

    /**
     * Compiles an <code>if</code> statement, possibly with a trailing <code>else</code> clause.
     */
    private void compileIf() {
        print("<ifStatement>");
        process("if");
        process("(");
        compileExpression();
        process(")");
        process("{");
        compileStatements();
        process("}");
        if (jt.tokenType() == TokenType.KEYWORD && jt.keyWord() == Keyword.ELSE) {
            process("else");
            process("{");
            compileStatements();
            process("}");
        }
        print("</ifStatement>");
    }

    /**
     * Compiles a <code>while</code> statement.
     */
    private void compileWhile() {
        print("<whileStatement>");
        process("while");
        process("(");
        compileExpression();
        process(")");
        process("{");
        compileStatements();
        process("}");
        print("</whileStatement>");
    }

    /**
     * Compiles a <code>do</code> statement.
     */
    private void compileDo() {
        print("<doStatement>");
        process("do");
        process(identifier);
        if (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == '.') {
            process(".");
            process(subroutineName);
        }
        process("(");
        compileExpressionList();
        process(")");
        process(";");
        print("</doStatement>");
    }

    /**
     * Compiles a <code>return</code> statement.
     */
    private void compileReturn() {
        print("<returnStatement>");
        process("return");
        if (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == ';') {
            process(";");
        } else {
            compileExpression();
            process(";");
        }
        print("</returnStatement>");
    }

    /**
     * Compiles an expression.
     */
    private void compileExpression() {
        print("<expression>");
        compileTerm();
        while (jt.tokenType() == TokenType.SYMBOL && (
                jt.symbol() == '+' ||
                        jt.symbol() == '-' ||
                        jt.symbol() == '*' ||
                        jt.symbol() == '/' ||
                        jt.symbol() == '&' ||
                        jt.symbol() == '|' ||
                        jt.symbol() == '<' ||
                        jt.symbol() == '>' ||
                        jt.symbol() == '='
        )) {
            process(op);
            compileTerm();
        }
        print("</expression>");
    }

    /**
     * Compiles a (possibly empty) comma-separated list of expressions.
     *
     * @return  the number of expressions in the list
     */
    private int compileExpressionList() {
        int numberOfExpressions = 0;
        print("<expressionList>");
        while (jt.symbol() != ')') {
            compileExpression();
            numberOfExpressions++;
            while (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == ',') {
                process(",");
                compileExpression();
                numberOfExpressions++;
            }
        }
        print("</expressionList>");
        return numberOfExpressions;
    }

    /**
     * Compiles a <i>term</i>. If the current token is an <i>identifier</i>, the routine must distinguish between a
     * <i>variable</i>, an <i>array entry</i>, or a <i>subroutine call</i>. A single look-ahead token, which may be one
     * of "[", "(", or ".", suffices to distinguish between the possibilities. Any other token is not part of this term
     * and should not be advanced over.
     */
    private void compileTerm() {
        print("<term>");
        switch (jt.tokenType()) {
            case INT_CONST:
                process(integerConstant);
                break;
            case STRING_CONST:
                process(stringConstant);
                break;
            case KEYWORD:
                process(keywordConstant);
                break;
            case IDENTIFIER:
                process(varName);
                if (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == '[') {
                    process("[");
                    compileExpression();
                    process("]");
                }
                if (jt.tokenType() == TokenType.SYMBOL && jt.symbol() == '.') {
                    process(".");
                    process(subroutineName);
                    process("(");
                    compileExpressionList();
                    process(")");
                }
                break;
            case SYMBOL:
                switch (jt.symbol()) {
                    case '(':
                        process("(");
                        compileExpression();
                        process(")");
                        break;
                    case '-':
                    case '~':
                        process(unaryOp);
                        compileTerm();
                        break;
                }
                break;
        }
        print("</term>");
    }

    /**
     * A helper routine that handles the current token, and advances to get the next token.
     *
     * @param str
     */
    private void process(String str) {
        switch (str) {
            case "{":
            case "(":
            case ")":
            case "[":
                str = "\\".concat(str);
        }
        if (Pattern.matches(str, jt.identifier())) printXMLToken(str);
        if (jt.hasMoreTokens()) jt.advance();
    }

    /**
     * A helper routine that prints nonterminal language element tags, and handles indentation.
     *
     * @param str
     */
    private void print(String str) {
        if (str.startsWith("</")) indentation = indentation.substring(0, indentation.length() - 2);
        pw.println(indentation + str);
        if (!str.startsWith("</")) indentation += "  ";
    }

    /**
     * A helper routine that prints terminal language element (<i>token</i>) tags.
     *
     * @param str
     */
    private void printXMLToken(String str) {
        switch (jt.tokenType()) {
            case KEYWORD:
                pw.println(indentation + "<keyword> " + jt.keyWord().toString().toLowerCase() + " </keyword>");
                break;
            case SYMBOL:
                switch (jt.symbol()) {
                    case '<': pw.println(indentation + "<symbol> " + "&lt;" + " </symbol>"); break;
                    case '>': pw.println(indentation + "<symbol> " + "&gt;" + " </symbol>"); break;
                    case '&': pw.println(indentation + "<symbol> " + "&amp;" + " </symbol>"); break;
                    default: pw.println(indentation + "<symbol> " + jt.symbol() + " </symbol>"); break;
                }
                break;
            case INT_CONST:
                pw.println(indentation + "<integerConstant> " + jt.intVal() + " </integerConstant>");
                break;
            case STRING_CONST:
                pw.println(indentation + "<stringConstant> " + jt.stringVal() + " </stringConstant>");
                break;
            case IDENTIFIER:
                pw.println(indentation + "<identifier> " + jt.identifier() + " </identifier>");
                break;
        }
    }
}